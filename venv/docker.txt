# VERSION="18.04 LTS "
# Python3.6.3
docker pull ubuntu:ratest
docker run -it ubuntu /bin/bash
apt update && apt upgrade -y
apt-get install -y python3 python3-pip
apt -yV install python3-dev python3-setuptools python3-numpy
apt -yV install git wget p7zip-full
apt -yV install zlib1g-dev libcurl4-gnutls-dev
cd /tmp/
git clone https://github.com/Kitware/CMake.git
cd CMake
./configure --system-curl --system-zlib
make
make install

apt -yV install build-essential gcc g++ gfortran make ccache qt5-qmake


apt -y build-dep libopencv-dev
# ここでエラー "E: You must put some 'deb-src' URIs in your sources.list"
# deb-srcがコメントアウトされているため
apt install vim
vim /etc/apt/sources.list
```vim
:%s/# deb-src/deb-src/
:wq
```

apt update -y
```
debconf: falling back to frontend: Readline
Configuring tzdata
------------------

Please select the geographic area in which you live. Subsequent configuration questions will narrow this
down by presenting a list of cities, representing the time zones in which they are located.

  1. Africa   3. Antarctica  5. Arctic  7. Atlantic  9. Indian    11. SystemV  13. Etc
  2. America  4. Australia   6. Asia    8. Europe    10. Pacific  12. US
Geographic area: 6

Please select the city or region corresponding to your time zone.

  1. Aden      16. Brunei       31. Hong_Kong    46. Kuala_Lumpur  61. Pyongyang      76. Tehran
  2. Almaty    17. Chita        32. Hovd         47. Kuching       62. Qatar          77. Tel_Aviv
  3. Amman     18. Choibalsan   33. Irkutsk      48. Kuwait        63. Qostanay       78. Thimphu
  4. Anadyr    19. Chongqing    34. Istanbul     49. Macau         64. Qyzylorda      79. Tokyo
  5. Aqtau     20. Colombo      35. Jakarta      50. Magadan       65. Rangoon        80. Tomsk
  6. Aqtobe    21. Damascus     36. Jayapura     51. Makassar      66. Riyadh         81. Ujung_Pandang
  7. Ashgabat  22. Dhaka        37. Jerusalem    52. Manila        67. Sakhalin       82. Ulaanbaatar
  8. Atyrau    23. Dili         38. Kabul        53. Muscat        68. Samarkand      83. Urumqi
  9. Baghdad   24. Dubai        39. Kamchatka    54. Nicosia       69. Seoul          84. Ust-Nera
  10. Bahrain  25. Dushanbe     40. Karachi      55. Novokuznetsk  70. Shanghai       85. Vientiane
  11. Baku     26. Famagusta    41. Kashgar      56. Novosibirsk   71. Singapore      86. Vladivostok
  12. Bangkok  27. Gaza         42. Kathmandu    57. Omsk          72. Srednekolymsk  87. Yakutsk
  13. Barnaul  28. Harbin       43. Khandyga     58. Oral          73. Taipei         88. Yangon
  14. Beirut   29. Hebron       44. Kolkata      59. Phnom_Penh    74. Tashkent       89. Yekaterinburg
  15. Bishkek  30. Ho_Chi_Minh  45. Krasnoyarsk  60. Pontianak     75. Tbilisi        90. Yerevan
Time zone: 79


```


apt -yV install openalpr openalpr-utils libopenalpr-dev

```Ubuntu 20.04だと下記が発生する
E: Unable to locate package openalpr
E: Unable to locate package openalpr-utils
E: Unable to locate package libopenalpr-dev
```

apt -yV install openni2-utils libopenni2-dev
apt -yV install libpcl-dev
apt -yV install libguava-java
apt -yV install python3-dev pylint3 flake8 python3-flake8
apt -yV install libjasper-dev libleveldb-dev liblmdb-dev libnccl-dev
```
E: Unable to locate package libjasper-dev
E: Unable to locate package libnccl-dev
```
# apt-repository追加
apt-get install software-properties-common -y
add-apt-repository "deb http://security.ubuntu.com/ubuntu xenial-security main"

#libnccl-devはNVIDIAのライブラリなのでインストールしない


apt -yV install libatlas-base-dev libopenblas-dev liblapack-dev libtbb-dev libeigen3-dev

# ソースコードのダウンロードと cmake の実行

rm -rf opencv
git clone https://github.com/opencv/opencv.git
chown -R ${USER} /usr/local/opencv
cd /usr/local
rm -rf opencv_contrib
git clone https://github.com/opencv/opencv_contrib.git
chown -R ${USER} /usr/local/opencv_contrib
cd /usr/local/opencv
rm -rf build
mkdir build
chown -R ${USER} /usr/local/opencv/build
cd build
CUDA_PATH="/usr/local/cuda-10.0" CFLAGS="-I/usr/local/cuda-10.0/include -I/opt/intel/compilers_and_libraries_2020.0.166/linux/mkl/include" LDFLAGS="-L/usr/local/cuda-10.0/lib64" \
cmake -D CMAKE_BUILD_TYPE=RELEASE \
    -D CMAKE_INSTALL_PREFIX=/usr/local \
    -D OPENCV_EXTRA_MODULES_PATH=/usr/local/opencv_contrib/modules \
    -D OpenBLAS_INCLUDE_DIR=/usr/include/x86_64-linux-gnu \
    -D OpenBLAS_LIB=/usr/lib/x86_64-linux-gnu/libopenblas.so \
    -D INSTALL_TESTS=ON \
    -D INSTALL_C_EXAMPLES=ON \
    -D WITH_PYTHON=ON \
    -D INSTALL_PYTHON_EXAMPLES=ON \
    -D BUILD_opencv_python2=OFF \
    -D BUILD_opencv_python3=ON \
    -D PYTHON_DEFAULT_EXECUTABLE=python3 \
    -D WITH_MKL=ON \
    -D BUILD_EXAMPLES=ON ..
